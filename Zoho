namespace Zoho.Controllers
{
    public class ZohoController : Controller
    {
        private const string CLIENT_ID = "xxxxxxx";
        private const string CLIENT_SECRET = "xxxxxx";
        private const string TOKEN_GRANT_TYPE = "authorization_code";
        private const string TOKEN_REDIRECT_URI = "https://xxxxxx/TokenCallBack";
        private const string AUTH_SCOPE = "ZohoCRM.modules.all";
        private const string AUTH_RESPONSE_TYPE = "code";
        private const string AUTH_ACCESS_TYPE = "online";
        private const string AUTH_CODE = "{0}";
        private const string AUTH_REDIRECT_URI = "https://xxxxxx/AuthCallBack";
        private const string URL_AUTH = "https://accounts.zoho.com/oauth/v2/auth?scope={0}&client_id={1}&response_type={2}&access_type={3}&redirect_uri={4}";
        private const string URL_TOKEN = "https://accounts.zoho.com/oauth/v2/token";
        private const string URL_API = " https://www.zohoapis.com/crm/v2/contacts/upsert";

        private readonly Uri url_Auth = new Uri(string.Format(URL_AUTH, AUTH_SCOPE, CLIENT_ID, AUTH_RESPONSE_TYPE, AUTH_ACCESS_TYPE, AUTH_REDIRECT_URI));
        
        //Pasamos url_Auth a un link de la vista para hacer la petición del token para que redirija a la URL Callback que le indicamos al crear la cuenta de cliente
        public ActionResult Index()
        {
            ViewData["TOKEN"] = string.Empty;
            ViewData["URL_AUTH"] = url_Auth;
            return View();
        }
        //URL Callback que indicamos al crear la cuenta de cliente
        public ActionResult AuthCallBack(string code, string location)
        {
            TokenResponseViewModel Token = new TokenResponseViewModel();
            RequestResponseViewModel json;
            try
            {
                Dictionary<string, object> postParameters = new Dictionary<string, object>
                {
                    { "client_id", CLIENT_ID },
                    { "client_secret", CLIENT_SECRET },
                    { "grant_type", TOKEN_GRANT_TYPE },
                    { "code", code },
                    { "redirect_uri", AUTH_REDIRECT_URI }
                };
                //Componer el Post Multipart
                using (HttpWebResponse webResponse = MultipartFormDataPost(URL_TOKEN, "XXXXX", postParameters))
                {
                    using (StreamReader responseReader = new StreamReader(webResponse.GetResponseStream()))
                    {
                        Token = JsonConvert.DeserializeObject<TokenResponseViewModel>(responseReader.ReadToEnd());
                    }
                }
            }
            catch (Exception ex)
            {
                
            }
            //Si todo OK tenemos un token de autorización de Zoho. Token.access_token
            //En el caso real se manda a un formulario previo al proceso de UPSERT en Zoho
            return View("Syncro", new SyncViewModel()
            {
                Token = Token.access_token
            });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        //Aquí ya se realizar la sincronización con Zoho
        public async Task<ActionResult> Syncro(SyncViewModel model)
        {
            if (!ModelState.IsValid)
            {
                //Error
            }
            do //Syncro. Terminará siempre por error o porque ya no hay mas registros.
            {
                try
                {
                    //Aquí se debe leer desde el origen de datos del cliente(SQL) los datos a sincronizar.
                    //Se debe componer un Json para mandar a Zoho.
                    //En el caso real se tiene un modelo que se rellena con los datos del SQL y se serializa a Json
                                 
                    using (HttpClient client = new HttpClient())
                    {
                        client.DefaultRequestHeaders.Add("Authorization", "Zoho-oauthtoken " + model.Token);
                        HttpResponseMessage response = await client.PostAsync(URL_API, new StringContent(JsonConvert.SerializeObject([Aquí el modelo a serializar como Json]), Encoding.UTF8, "application/json"));

                        if (response.StatusCode != HttpStatusCode.OK) //Zoho Error
                        {
                        }
                    }
                 }
                catch (Exception ex) //No more rows
                {
                    //Error general
                    break;
                }
            } while (true);

            //Proceso finalizado OK
            return View("SyncroSummary", json);
        }


        private static readonly Encoding encoding = Encoding.UTF8;

        private HttpWebResponse MultipartFormDataPost(string postUrl, string userAgent, Dictionary<string, object> postParameters)
        {
            string formDataBoundary = string.Format("----------{0:N}", Guid.NewGuid());
            string contentType = "multipart/form-data; boundary=" + formDataBoundary;

            byte[] formData = GetMultipartFormData(postParameters, formDataBoundary);

            return PostForm(postUrl, userAgent, contentType, formData);
        }

        private static HttpWebResponse PostForm(string postUrl, string userAgent, string contentType, byte[] formData)
        {
            HttpWebRequest request = WebRequest.Create(postUrl) as HttpWebRequest;

            if (request == null)
            {
                throw new NullReferenceException("request is not a http request");
            }

            // Set up the request properties.
            request.Method = "POST";
            request.ContentType = contentType;
            request.UserAgent = userAgent;
            request.CookieContainer = new CookieContainer();
            request.ContentLength = formData.Length;

            // You could add authentication here as well if needed:
            // request.PreAuthenticate = true;
            // request.AuthenticationLevel = System.Net.Security.AuthenticationLevel.MutualAuthRequested;
            // request.Headers.Add("Authorization", "Basic " + Convert.ToBase64String(System.Text.Encoding.Default.GetBytes("username" + ":" + "password")));

            // Send the form data to the request.
            using (Stream requestStream = request.GetRequestStream())
            {
                requestStream.Write(formData, 0, formData.Length);
                requestStream.Close();
            }

            return request.GetResponse() as HttpWebResponse;
        }

        private byte[] GetMultipartFormData(Dictionary<string, object> postParameters, string boundary)
        {
            Stream formDataStream = new System.IO.MemoryStream();
            bool needsCLRF = false;

            foreach (KeyValuePair<string, object> param in postParameters)
            {
                // Thanks to feedback from commenters, add a CRLF to allow multiple parameters to be added.
                // Skip it on the first parameter, add it to subsequent parameters.
                if (needsCLRF)
                {
                    formDataStream.Write(encoding.GetBytes("\r\n"), 0, encoding.GetByteCount("\r\n"));
                }

                needsCLRF = true;

                if (param.Value is FileParameter)
                {
                    FileParameter fileToUpload = (FileParameter)param.Value;

                    // Add just the first part of this param, since we will write the file data directly to the Stream
                    string header = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"; filename=\"{2}\"\r\nContent-Type: {3}\r\n\r\n",
                        boundary,
                        param.Key,
                        fileToUpload.FileName ?? param.Key,
                        fileToUpload.ContentType ?? "application/octet-stream");

                    formDataStream.Write(encoding.GetBytes(header), 0, encoding.GetByteCount(header));

                    // Write the file data directly to the Stream, rather than serializing it to a string.
                    formDataStream.Write(fileToUpload.File, 0, fileToUpload.File.Length);
                }
                else
                {
                    string postData = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"{1}\"\r\n\r\n{2}",
                        boundary,
                        param.Key,
                        param.Value);
                    formDataStream.Write(encoding.GetBytes(postData), 0, encoding.GetByteCount(postData));
                }
            }

            // Add the end of the request.  Start with a newline
            string footer = "\r\n--" + boundary + "--\r\n";
            formDataStream.Write(encoding.GetBytes(footer), 0, encoding.GetByteCount(footer));

            // Dump the Stream into a byte[]
            formDataStream.Position = 0;
            byte[] formData = new byte[formDataStream.Length];
            formDataStream.Read(formData, 0, formData.Length);
            formDataStream.Close();

            return formData;
        }

        private class FileParameter
        {
            public byte[] File { get; set; }
            public string FileName { get; set; }
            public string ContentType { get; set; }
            public FileParameter(byte[] file) : this(file, null) { }
            public FileParameter(byte[] file, string filename) : this(file, filename, null) { }
            public FileParameter(byte[] file, string filename, string contenttype)
            {
                File = file;
                FileName = filename;
                ContentType = contenttype;
            }
        }
    }
}

